local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "DevHub",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "DevHub Loading",
   LoadingSubtitle = "by DevHope372",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "DevHub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "DevHub",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Dev372"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

-- Values

--Tab 1
_G.OpAutoRoll = false -- Inicializar como false
_G.OpAutoVending = false -- Inicializar como false
_G.OpAutoMineMerchant = false -- Inicializar como false

-- Auto Mine
_G.OpAutoMine1 = false -- Inicializar como false
_G.OpAutoMine2 = false -- Inicializar como false
_G.OpAutoMine3 = false -- Inicializar como false
_G.OpAutoMine4 = false -- Inicializar como false
_G.OpAutoMine5 = false -- Inicializar como false
_G.OpAutoMine6 = false -- Inicializar como false
_G.OpAutoMine7 = false -- Inicializar como false
_G.OpAutoMine8 = false -- Inicializar como false
_G.OpAutoMine9 = false -- Inicializar como false
_G.OpAutoMine10 = false -- Inicializar como false
_G.OpAutoMine11 = false -- Inicializar como false

-- Auto Ice Fish Merchant
_G.OpAutoIceFish1 = false -- Inicializar como false
_G.OpAutoIceFish2 = false -- Inicializar como false
_G.OpAutoIceFish3 = false -- Inicializar como false
_G.OpAutoIceFish4 = false -- Inicializar como false
_G.OpAutoIceFish5 = false -- Inicializar como false
_G.OpAutoIceFish6 = false -- Inicializar como false


-- Tab 1

local Tab = Window:CreateTab("Auto Farm", 4483362458) -- Title, Image

local Toggle = Tab:CreateToggle({
    Name = "Auto Roll",
    CurrentValue = false,
    Flag = "Toggle1", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoRoll = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoRoll do
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Eggs_Roll"):InvokeServer()
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Vending Machine",
    CurrentValue = false,
    Flag = "Toggle2", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoVending = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoVending do
                    local args = {
                        [1] = "PotionVendingMachine"
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("VendingMachines_Purchase"):InvokeServer(unpack(args))                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Mining Merchant",
    CurrentValue = false,
    Flag = "Toggle3", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoVending = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoVending do
                -- Auto Merchant (versión optimizada)
                for i = 1, 8 do
                 local args = {
                 [1] = "MiningMerchant",
                 [2] = i
                 }
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("CustomMerchants_Purchase"):InvokeServer(unpack(args))
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                 end
                end
            end)
        end
    end,
})


-- Tab 2

local Tab = Window:CreateTab("Auto Mine", 4483362458) -- Title, Image

local Toggle = Tab:CreateToggle({
    Name = "Auto Mine Dirt Ore",
    CurrentValue = false,
    Flag = "Toggle10", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoMine1 = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoMine1 do
                    local args = {
                        [1] = 6
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mining_Attack"):InvokeServer(unpack(args))
                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Mine Stone Ore",
    CurrentValue = false,
    Flag = "Toggle11", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoMine2 = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoMine2 do
                    local args = {
                        [1] = 5
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mining_Attack"):InvokeServer(unpack(args))
                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Mine Copper Ore",
    CurrentValue = false,
    Flag = "Toggle12", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoMine3 = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoMine3 do
                    local args = {
                        [1] = 3
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mining_Attack"):InvokeServer(unpack(args))
                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Mine Iron Ore",
    CurrentValue = false,
    Flag = "Toggle13", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoMine4 = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoMine4 do
                    local args = {
                        [1] = 2
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mining_Attack"):InvokeServer(unpack(args))
                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Mine Gold Ore",
    CurrentValue = false,
    Flag = "Toggle14", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoMine5 = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoMine5 do
                    local args = {
                        [1] = 1
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mining_Attack"):InvokeServer(unpack(args))
                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Mine Emerald Ore",
    CurrentValue = false,
    Flag = "Toggle15", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoMine6 = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoMine6 do
                    local args = {
                        [1] = 4
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mining_Attack"):InvokeServer(unpack(args))
                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Mine Obsidian Ore 1 ",
    CurrentValue = false,
    Flag = "Toggle16", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoMine7 = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoMine7 do
                    local args = {
                        [1] = 9
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mining_Attack"):InvokeServer(unpack(args))
                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Mine Obsidian Ore 2 ",
    CurrentValue = false,
    Flag = "Toggle17", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoMine8 = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoMine8 do
                    local args = {
                        [1] = 10
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mining_Attack"):InvokeServer(unpack(args))
                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Mine Runic Ore 1 ",
    CurrentValue = false,
    Flag = "Toggle18", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoMine9 = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoMine9 do
                    local args = {
                        [1] = 7
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mining_Attack"):InvokeServer(unpack(args))
                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Mine Runic Ore 2 ",
    CurrentValue = false,
    Flag = "Toggle19", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoMine10 = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoMine10 do
                    local args = {
                        [1] = 8
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mining_Attack"):InvokeServer(unpack(args))
                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Mine Magma Ore",
    CurrentValue = false,
    Flag = "Toggle20", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoMine11 = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoMine11 do
                    local args = {
                        [1] = 11
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mining_Attack"):InvokeServer(unpack(args))
                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

-- Tab 3

local Tab = Window:CreateTab("Auto Ice Fish Merchant", 4483362458) -- Title, Image

local Toggle = Tab:CreateToggle({
    Name = "Auto Ice Merchant 1",
    CurrentValue = false,
    Flag = "Toggle30", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoIceFish1 = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoIceFish1 do
                    local args = {
                        [1] = "IceFishingMerchant",
                        [2] = 1
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("CustomMerchants_Purchase"):InvokeServer(unpack(args))                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Ice Merchant 2",
    CurrentValue = false,
    Flag = "Toggle31", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoIceFish2 = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoIceFish2 do
                    local args = {
                        [1] = "IceFishingMerchant",
                        [2] = 2
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("CustomMerchants_Purchase"):InvokeServer(unpack(args))                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Ice Merchant 3",
    CurrentValue = false,
    Flag = "Toggle32", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoIceFish3 = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoIceFish3 do
                    local args = {
                        [1] = "IceFishingMerchant",
                        [2] = 3
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("CustomMerchants_Purchase"):InvokeServer(unpack(args))                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Ice Merchant 4",
    CurrentValue = false,
    Flag = "Toggle33", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoIceFish4 = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoIceFish4 do
                    local args = {
                        [1] = "IceFishingMerchant",
                        [2] = 4
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("CustomMerchants_Purchase"):InvokeServer(unpack(args))                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Ice Merchant 5",
    CurrentValue = false,
    Flag = "Toggle34", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoIceFish5 = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoIceFish5 do
                    local args = {
                        [1] = "IceFishingMerchant",
                        [2] = 5
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("CustomMerchants_Purchase"):InvokeServer(unpack(args))                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Auto Ice Merchant 6",
    CurrentValue = false,
    Flag = "Toggle35", -- Asegúrate de que cada elemento tenga un flag único
    Callback = function (Value)
        _G.OpAutoIceFish6 = Value -- Actualiza el valor global basado en el estado del toggle
        if Value then
            -- Si el toggle está activado, empieza a ejecutar la función
            task.spawn(function() -- Usamos task.spawn para que sea asíncrono
                while _G.OpAutoIceFish6 do
                    local args = {
                        [1] = "IceFishingMerchant",
                        [2] = 6
                    }
                    
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("CustomMerchants_Purchase"):InvokeServer(unpack(args))                    
                    task.wait(0.1) -- Añade un pequeño retraso para evitar sobrecarga
                end
            end)
        end
    end,
})
